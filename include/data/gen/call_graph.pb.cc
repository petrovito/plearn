// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: call_graph.proto

#include "call_graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_call_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallGraphM_DataNodesEntry_DoNotUse_call_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallGraphM_FlowNodesEntry_DoNotUse_call_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallGraphM_OpNodesEntry_DoNotUse_call_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpNodeM_call_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationM_call_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeM_call_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorNodeM_call_5fgraph_2eproto;
namespace plearn {
class OperationMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationM> _instance;
} _OperationM_default_instance_;
class ShapeMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShapeM> _instance;
} _ShapeM_default_instance_;
class OpNodeMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpNodeM> _instance;
} _OpNodeM_default_instance_;
class TensorNodeMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorNodeM> _instance;
} _TensorNodeM_default_instance_;
class CallGraphM_OpNodesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallGraphM_OpNodesEntry_DoNotUse> _instance;
} _CallGraphM_OpNodesEntry_DoNotUse_default_instance_;
class CallGraphM_FlowNodesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallGraphM_FlowNodesEntry_DoNotUse> _instance;
} _CallGraphM_FlowNodesEntry_DoNotUse_default_instance_;
class CallGraphM_DataNodesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallGraphM_DataNodesEntry_DoNotUse> _instance;
} _CallGraphM_DataNodesEntry_DoNotUse_default_instance_;
class CallGraphMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallGraphM> _instance;
} _CallGraphM_default_instance_;
}  // namespace plearn
static void InitDefaultsscc_info_CallGraphM_call_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plearn::_CallGraphM_default_instance_;
    new (ptr) ::plearn::CallGraphM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plearn::CallGraphM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CallGraphM_call_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CallGraphM_call_5fgraph_2eproto}, {
      &scc_info_CallGraphM_OpNodesEntry_DoNotUse_call_5fgraph_2eproto.base,
      &scc_info_CallGraphM_FlowNodesEntry_DoNotUse_call_5fgraph_2eproto.base,
      &scc_info_CallGraphM_DataNodesEntry_DoNotUse_call_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_CallGraphM_DataNodesEntry_DoNotUse_call_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plearn::_CallGraphM_DataNodesEntry_DoNotUse_default_instance_;
    new (ptr) ::plearn::CallGraphM_DataNodesEntry_DoNotUse();
  }
  ::plearn::CallGraphM_DataNodesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallGraphM_DataNodesEntry_DoNotUse_call_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CallGraphM_DataNodesEntry_DoNotUse_call_5fgraph_2eproto}, {
      &scc_info_TensorNodeM_call_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_CallGraphM_FlowNodesEntry_DoNotUse_call_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plearn::_CallGraphM_FlowNodesEntry_DoNotUse_default_instance_;
    new (ptr) ::plearn::CallGraphM_FlowNodesEntry_DoNotUse();
  }
  ::plearn::CallGraphM_FlowNodesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallGraphM_FlowNodesEntry_DoNotUse_call_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CallGraphM_FlowNodesEntry_DoNotUse_call_5fgraph_2eproto}, {
      &scc_info_TensorNodeM_call_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_CallGraphM_OpNodesEntry_DoNotUse_call_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plearn::_CallGraphM_OpNodesEntry_DoNotUse_default_instance_;
    new (ptr) ::plearn::CallGraphM_OpNodesEntry_DoNotUse();
  }
  ::plearn::CallGraphM_OpNodesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallGraphM_OpNodesEntry_DoNotUse_call_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CallGraphM_OpNodesEntry_DoNotUse_call_5fgraph_2eproto}, {
      &scc_info_OpNodeM_call_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_OpNodeM_call_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plearn::_OpNodeM_default_instance_;
    new (ptr) ::plearn::OpNodeM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plearn::OpNodeM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpNodeM_call_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpNodeM_call_5fgraph_2eproto}, {
      &scc_info_OperationM_call_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_OperationM_call_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plearn::_OperationM_default_instance_;
    new (ptr) ::plearn::OperationM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plearn::OperationM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationM_call_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OperationM_call_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_ShapeM_call_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plearn::_ShapeM_default_instance_;
    new (ptr) ::plearn::ShapeM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plearn::ShapeM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeM_call_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShapeM_call_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_TensorNodeM_call_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plearn::_TensorNodeM_default_instance_;
    new (ptr) ::plearn::TensorNodeM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plearn::TensorNodeM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorNodeM_call_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TensorNodeM_call_5fgraph_2eproto}, {
      &scc_info_ShapeM_call_5fgraph_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_call_5fgraph_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_call_5fgraph_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_call_5fgraph_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_call_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plearn::OperationM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plearn::OperationM, optype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plearn::ShapeM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plearn::ShapeM, rank_),
  PROTOBUF_FIELD_OFFSET(::plearn::ShapeM, dims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plearn::OpNodeM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plearn::OpNodeM, id_),
  PROTOBUF_FIELD_OFFSET(::plearn::OpNodeM, op_),
  PROTOBUF_FIELD_OFFSET(::plearn::OpNodeM, inputs_),
  PROTOBUF_FIELD_OFFSET(::plearn::OpNodeM, output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plearn::TensorNodeM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plearn::TensorNodeM, id_),
  PROTOBUF_FIELD_OFFSET(::plearn::TensorNodeM, shape_),
  PROTOBUF_FIELD_OFFSET(::plearn::TensorNodeM, outputs_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_OpNodesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_OpNodesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_OpNodesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_OpNodesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_FlowNodesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_FlowNodesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_FlowNodesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_FlowNodesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_DataNodesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_DataNodesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_DataNodesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM_DataNodesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM, opnodes_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM, flownodes_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM, datanodes_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM, innodes_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM, outnodes_),
  PROTOBUF_FIELD_OFFSET(::plearn::CallGraphM, internalnodes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::plearn::OperationM)},
  { 6, -1, sizeof(::plearn::ShapeM)},
  { 13, -1, sizeof(::plearn::OpNodeM)},
  { 22, -1, sizeof(::plearn::TensorNodeM)},
  { 30, 37, sizeof(::plearn::CallGraphM_OpNodesEntry_DoNotUse)},
  { 39, 46, sizeof(::plearn::CallGraphM_FlowNodesEntry_DoNotUse)},
  { 48, 55, sizeof(::plearn::CallGraphM_DataNodesEntry_DoNotUse)},
  { 57, -1, sizeof(::plearn::CallGraphM)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plearn::_OperationM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plearn::_ShapeM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plearn::_OpNodeM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plearn::_TensorNodeM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plearn::_CallGraphM_OpNodesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plearn::_CallGraphM_FlowNodesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plearn::_CallGraphM_DataNodesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plearn::_CallGraphM_default_instance_),
};

const char descriptor_table_protodef_call_5fgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020call_graph.proto\022\006plearn\"-\n\nOperationM"
  "\022\037\n\006opType\030\001 \001(\0162\017.plearn.OpTypeM\"$\n\006Sha"
  "peM\022\014\n\004rank\030\001 \001(\005\022\014\n\004dims\030\002 \003(\003\"U\n\007OpNod"
  "eM\022\n\n\002id\030\001 \001(\005\022\036\n\002op\030\002 \001(\0132\022.plearn.Oper"
  "ationM\022\016\n\006inputs\030\003 \003(\005\022\016\n\006output\030\004 \001(\005\"I"
  "\n\013TensorNodeM\022\n\n\002id\030\001 \001(\005\022\035\n\005shape\030\002 \001(\013"
  "2\016.plearn.ShapeM\022\017\n\007outputs\030\003 \003(\005\"\263\003\n\nCa"
  "llGraphM\0220\n\007opNodes\030\001 \003(\0132\037.plearn.CallG"
  "raphM.OpNodesEntry\0224\n\tflowNodes\030\002 \003(\0132!."
  "plearn.CallGraphM.FlowNodesEntry\0224\n\tdata"
  "Nodes\030\003 \003(\0132!.plearn.CallGraphM.DataNode"
  "sEntry\022\017\n\007inNodes\030\004 \003(\005\022\020\n\010outNodes\030\005 \003("
  "\005\022\025\n\rinternalNodes\030\006 \003(\005\032\?\n\014OpNodesEntry"
  "\022\013\n\003key\030\001 \001(\005\022\036\n\005value\030\002 \001(\0132\017.plearn.Op"
  "NodeM:\0028\001\032E\n\016FlowNodesEntry\022\013\n\003key\030\001 \001(\005"
  "\022\"\n\005value\030\002 \001(\0132\023.plearn.TensorNodeM:\0028\001"
  "\032E\n\016DataNodesEntry\022\013\n\003key\030\001 \001(\005\022\"\n\005value"
  "\030\002 \001(\0132\023.plearn.TensorNodeM:\0028\001*\037\n\007OpTyp"
  "eM\022\010\n\004NOOP\020\000\022\n\n\006MATMUL\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_call_5fgraph_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_call_5fgraph_2eproto_sccs[8] = {
  &scc_info_CallGraphM_call_5fgraph_2eproto.base,
  &scc_info_CallGraphM_DataNodesEntry_DoNotUse_call_5fgraph_2eproto.base,
  &scc_info_CallGraphM_FlowNodesEntry_DoNotUse_call_5fgraph_2eproto.base,
  &scc_info_CallGraphM_OpNodesEntry_DoNotUse_call_5fgraph_2eproto.base,
  &scc_info_OpNodeM_call_5fgraph_2eproto.base,
  &scc_info_OperationM_call_5fgraph_2eproto.base,
  &scc_info_ShapeM_call_5fgraph_2eproto.base,
  &scc_info_TensorNodeM_call_5fgraph_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_call_5fgraph_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_call_5fgraph_2eproto = {
  false, false, descriptor_table_protodef_call_5fgraph_2eproto, "call_graph.proto", 752,
  &descriptor_table_call_5fgraph_2eproto_once, descriptor_table_call_5fgraph_2eproto_sccs, descriptor_table_call_5fgraph_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_call_5fgraph_2eproto::offsets,
  file_level_metadata_call_5fgraph_2eproto, 8, file_level_enum_descriptors_call_5fgraph_2eproto, file_level_service_descriptors_call_5fgraph_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_call_5fgraph_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_call_5fgraph_2eproto)), true);
namespace plearn {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpTypeM_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_call_5fgraph_2eproto);
  return file_level_enum_descriptors_call_5fgraph_2eproto[0];
}
bool OpTypeM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void OperationM::InitAsDefaultInstance() {
}
class OperationM::_Internal {
 public:
};

OperationM::OperationM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plearn.OperationM)
}
OperationM::OperationM(const OperationM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  optype_ = from.optype_;
  // @@protoc_insertion_point(copy_constructor:plearn.OperationM)
}

void OperationM::SharedCtor() {
  optype_ = 0;
}

OperationM::~OperationM() {
  // @@protoc_insertion_point(destructor:plearn.OperationM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OperationM::ArenaDtor(void* object) {
  OperationM* _this = reinterpret_cast< OperationM* >(object);
  (void)_this;
}
void OperationM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationM& OperationM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationM_call_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void OperationM::Clear() {
// @@protoc_insertion_point(message_clear_start:plearn.OperationM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .plearn.OpTypeM opType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_optype(static_cast<::plearn::OpTypeM>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plearn.OperationM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .plearn.OpTypeM opType = 1;
  if (this->optype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_optype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plearn.OperationM)
  return target;
}

size_t OperationM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plearn.OperationM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .plearn.OpTypeM opType = 1;
  if (this->optype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plearn.OperationM)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plearn.OperationM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plearn.OperationM)
    MergeFrom(*source);
  }
}

void OperationM::MergeFrom(const OperationM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plearn.OperationM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.optype() != 0) {
    _internal_set_optype(from._internal_optype());
  }
}

void OperationM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plearn.OperationM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationM::CopyFrom(const OperationM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plearn.OperationM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationM::IsInitialized() const {
  return true;
}

void OperationM::InternalSwap(OperationM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(optype_, other->optype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShapeM::InitAsDefaultInstance() {
}
class ShapeM::_Internal {
 public:
};

ShapeM::ShapeM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dims_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plearn.ShapeM)
}
ShapeM::ShapeM(const ShapeM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:plearn.ShapeM)
}

void ShapeM::SharedCtor() {
  rank_ = 0;
}

ShapeM::~ShapeM() {
  // @@protoc_insertion_point(destructor:plearn.ShapeM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShapeM::ArenaDtor(void* object) {
  ShapeM* _this = reinterpret_cast< ShapeM* >(object);
  (void)_this;
}
void ShapeM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShapeM& ShapeM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShapeM_call_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void ShapeM::Clear() {
// @@protoc_insertion_point(message_clear_start:plearn.ShapeM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  rank_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 dims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plearn.ShapeM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // repeated int64 dims = 2;
  {
    int byte_size = _dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_dims(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plearn.ShapeM)
  return target;
}

size_t ShapeM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plearn.ShapeM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plearn.ShapeM)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plearn.ShapeM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plearn.ShapeM)
    MergeFrom(*source);
  }
}

void ShapeM::MergeFrom(const ShapeM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plearn.ShapeM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void ShapeM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plearn.ShapeM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeM::CopyFrom(const ShapeM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plearn.ShapeM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeM::IsInitialized() const {
  return true;
}

void ShapeM::InternalSwap(ShapeM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dims_.InternalSwap(&other->dims_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpNodeM::InitAsDefaultInstance() {
  ::plearn::_OpNodeM_default_instance_._instance.get_mutable()->op_ = const_cast< ::plearn::OperationM*>(
      ::plearn::OperationM::internal_default_instance());
}
class OpNodeM::_Internal {
 public:
  static const ::plearn::OperationM& op(const OpNodeM* msg);
};

const ::plearn::OperationM&
OpNodeM::_Internal::op(const OpNodeM* msg) {
  return *msg->op_;
}
OpNodeM::OpNodeM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plearn.OpNodeM)
}
OpNodeM::OpNodeM(const OpNodeM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_op()) {
    op_ = new ::plearn::OperationM(*from.op_);
  } else {
    op_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&id_)) + sizeof(output_));
  // @@protoc_insertion_point(copy_constructor:plearn.OpNodeM)
}

void OpNodeM::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpNodeM_call_5fgraph_2eproto.base);
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&op_)) + sizeof(output_));
}

OpNodeM::~OpNodeM() {
  // @@protoc_insertion_point(destructor:plearn.OpNodeM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpNodeM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete op_;
}

void OpNodeM::ArenaDtor(void* object) {
  OpNodeM* _this = reinterpret_cast< OpNodeM* >(object);
  (void)_this;
}
void OpNodeM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpNodeM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpNodeM& OpNodeM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpNodeM_call_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void OpNodeM::Clear() {
// @@protoc_insertion_point(message_clear_start:plearn.OpNodeM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArena() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&id_)) + sizeof(output_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpNodeM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plearn.OperationM op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_inputs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_inputs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpNodeM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plearn.OpNodeM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .plearn.OperationM op = 2;
  if (this->has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::op(this), target, stream);
  }

  // repeated int32 inputs = 3;
  {
    int byte_size = _inputs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_inputs(), byte_size, target);
    }
  }

  // int32 output = 4;
  if (this->output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plearn.OpNodeM)
  return target;
}

size_t OpNodeM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plearn.OpNodeM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 inputs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->inputs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inputs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .plearn.OperationM op = 2;
  if (this->has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 output = 4;
  if (this->output() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_output());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpNodeM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plearn.OpNodeM)
  GOOGLE_DCHECK_NE(&from, this);
  const OpNodeM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpNodeM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plearn.OpNodeM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plearn.OpNodeM)
    MergeFrom(*source);
  }
}

void OpNodeM::MergeFrom(const OpNodeM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plearn.OpNodeM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.has_op()) {
    _internal_mutable_op()->::plearn::OperationM::MergeFrom(from._internal_op());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.output() != 0) {
    _internal_set_output(from._internal_output());
  }
}

void OpNodeM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plearn.OpNodeM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpNodeM::CopyFrom(const OpNodeM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plearn.OpNodeM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpNodeM::IsInitialized() const {
  return true;
}

void OpNodeM::InternalSwap(OpNodeM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpNodeM, output_)
      + sizeof(OpNodeM::output_)
      - PROTOBUF_FIELD_OFFSET(OpNodeM, op_)>(
          reinterpret_cast<char*>(&op_),
          reinterpret_cast<char*>(&other->op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpNodeM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TensorNodeM::InitAsDefaultInstance() {
  ::plearn::_TensorNodeM_default_instance_._instance.get_mutable()->shape_ = const_cast< ::plearn::ShapeM*>(
      ::plearn::ShapeM::internal_default_instance());
}
class TensorNodeM::_Internal {
 public:
  static const ::plearn::ShapeM& shape(const TensorNodeM* msg);
};

const ::plearn::ShapeM&
TensorNodeM::_Internal::shape(const TensorNodeM* msg) {
  return *msg->shape_;
}
TensorNodeM::TensorNodeM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plearn.TensorNodeM)
}
TensorNodeM::TensorNodeM(const TensorNodeM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::plearn::ShapeM(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:plearn.TensorNodeM)
}

void TensorNodeM::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TensorNodeM_call_5fgraph_2eproto.base);
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(id_));
}

TensorNodeM::~TensorNodeM() {
  // @@protoc_insertion_point(destructor:plearn.TensorNodeM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensorNodeM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shape_;
}

void TensorNodeM::ArenaDtor(void* object) {
  TensorNodeM* _this = reinterpret_cast< TensorNodeM* >(object);
  (void)_this;
}
void TensorNodeM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorNodeM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorNodeM& TensorNodeM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorNodeM_call_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void TensorNodeM::Clear() {
// @@protoc_insertion_point(message_clear_start:plearn.TensorNodeM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorNodeM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plearn.ShapeM shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 outputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_outputs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_outputs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorNodeM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plearn.TensorNodeM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .plearn.ShapeM shape = 2;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shape(this), target, stream);
  }

  // repeated int32 outputs = 3;
  {
    int byte_size = _outputs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_outputs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plearn.TensorNodeM)
  return target;
}

size_t TensorNodeM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plearn.TensorNodeM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 outputs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->outputs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _outputs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .plearn.ShapeM shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorNodeM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plearn.TensorNodeM)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorNodeM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorNodeM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plearn.TensorNodeM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plearn.TensorNodeM)
    MergeFrom(*source);
  }
}

void TensorNodeM::MergeFrom(const TensorNodeM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plearn.TensorNodeM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (from.has_shape()) {
    _internal_mutable_shape()->::plearn::ShapeM::MergeFrom(from._internal_shape());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void TensorNodeM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plearn.TensorNodeM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorNodeM::CopyFrom(const TensorNodeM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plearn.TensorNodeM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorNodeM::IsInitialized() const {
  return true;
}

void TensorNodeM::InternalSwap(TensorNodeM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorNodeM, id_)
      + sizeof(TensorNodeM::id_)
      - PROTOBUF_FIELD_OFFSET(TensorNodeM, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorNodeM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CallGraphM_OpNodesEntry_DoNotUse::CallGraphM_OpNodesEntry_DoNotUse() {}
CallGraphM_OpNodesEntry_DoNotUse::CallGraphM_OpNodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CallGraphM_OpNodesEntry_DoNotUse::MergeFrom(const CallGraphM_OpNodesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CallGraphM_OpNodesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CallGraphM_OpNodesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

CallGraphM_FlowNodesEntry_DoNotUse::CallGraphM_FlowNodesEntry_DoNotUse() {}
CallGraphM_FlowNodesEntry_DoNotUse::CallGraphM_FlowNodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CallGraphM_FlowNodesEntry_DoNotUse::MergeFrom(const CallGraphM_FlowNodesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CallGraphM_FlowNodesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CallGraphM_FlowNodesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

CallGraphM_DataNodesEntry_DoNotUse::CallGraphM_DataNodesEntry_DoNotUse() {}
CallGraphM_DataNodesEntry_DoNotUse::CallGraphM_DataNodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CallGraphM_DataNodesEntry_DoNotUse::MergeFrom(const CallGraphM_DataNodesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CallGraphM_DataNodesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CallGraphM_DataNodesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void CallGraphM::InitAsDefaultInstance() {
}
class CallGraphM::_Internal {
 public:
};

CallGraphM::CallGraphM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  opnodes_(arena),
  flownodes_(arena),
  datanodes_(arena),
  innodes_(arena),
  outnodes_(arena),
  internalnodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plearn.CallGraphM)
}
CallGraphM::CallGraphM(const CallGraphM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      innodes_(from.innodes_),
      outnodes_(from.outnodes_),
      internalnodes_(from.internalnodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opnodes_.MergeFrom(from.opnodes_);
  flownodes_.MergeFrom(from.flownodes_);
  datanodes_.MergeFrom(from.datanodes_);
  // @@protoc_insertion_point(copy_constructor:plearn.CallGraphM)
}

void CallGraphM::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallGraphM_call_5fgraph_2eproto.base);
}

CallGraphM::~CallGraphM() {
  // @@protoc_insertion_point(destructor:plearn.CallGraphM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CallGraphM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CallGraphM::ArenaDtor(void* object) {
  CallGraphM* _this = reinterpret_cast< CallGraphM* >(object);
  (void)_this;
}
void CallGraphM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallGraphM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallGraphM& CallGraphM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallGraphM_call_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CallGraphM::Clear() {
// @@protoc_insertion_point(message_clear_start:plearn.CallGraphM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opnodes_.Clear();
  flownodes_.Clear();
  datanodes_.Clear();
  innodes_.Clear();
  outnodes_.Clear();
  internalnodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallGraphM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .plearn.OpNodeM> opNodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&opnodes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .plearn.TensorNodeM> flowNodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&flownodes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .plearn.TensorNodeM> dataNodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&datanodes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 inNodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_innodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_innodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 outNodes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_outnodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_outnodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 internalNodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_internalnodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_internalnodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CallGraphM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plearn.CallGraphM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .plearn.OpNodeM> opNodes = 1;
  if (!this->_internal_opnodes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_opnodes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_opnodes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >::const_iterator
          it = this->_internal_opnodes().begin();
          it != this->_internal_opnodes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CallGraphM_OpNodesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >::const_iterator
          it = this->_internal_opnodes().begin();
          it != this->_internal_opnodes().end(); ++it) {
        target = CallGraphM_OpNodesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .plearn.TensorNodeM> flowNodes = 2;
  if (!this->_internal_flownodes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_flownodes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_flownodes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >::const_iterator
          it = this->_internal_flownodes().begin();
          it != this->_internal_flownodes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CallGraphM_FlowNodesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >::const_iterator
          it = this->_internal_flownodes().begin();
          it != this->_internal_flownodes().end(); ++it) {
        target = CallGraphM_FlowNodesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .plearn.TensorNodeM> dataNodes = 3;
  if (!this->_internal_datanodes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_datanodes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_datanodes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >::const_iterator
          it = this->_internal_datanodes().begin();
          it != this->_internal_datanodes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CallGraphM_DataNodesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >::const_iterator
          it = this->_internal_datanodes().begin();
          it != this->_internal_datanodes().end(); ++it) {
        target = CallGraphM_DataNodesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // repeated int32 inNodes = 4;
  {
    int byte_size = _innodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_innodes(), byte_size, target);
    }
  }

  // repeated int32 outNodes = 5;
  {
    int byte_size = _outnodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_outnodes(), byte_size, target);
    }
  }

  // repeated int32 internalNodes = 6;
  {
    int byte_size = _internalnodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_internalnodes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plearn.CallGraphM)
  return target;
}

size_t CallGraphM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plearn.CallGraphM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .plearn.OpNodeM> opNodes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_opnodes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >::const_iterator
      it = this->_internal_opnodes().begin();
      it != this->_internal_opnodes().end(); ++it) {
    total_size += CallGraphM_OpNodesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .plearn.TensorNodeM> flowNodes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_flownodes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >::const_iterator
      it = this->_internal_flownodes().begin();
      it != this->_internal_flownodes().end(); ++it) {
    total_size += CallGraphM_FlowNodesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .plearn.TensorNodeM> dataNodes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_datanodes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >::const_iterator
      it = this->_internal_datanodes().begin();
      it != this->_internal_datanodes().end(); ++it) {
    total_size += CallGraphM_DataNodesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int32 inNodes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->innodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _innodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 outNodes = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->outnodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _outnodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 internalNodes = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->internalnodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _internalnodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallGraphM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plearn.CallGraphM)
  GOOGLE_DCHECK_NE(&from, this);
  const CallGraphM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CallGraphM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plearn.CallGraphM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plearn.CallGraphM)
    MergeFrom(*source);
  }
}

void CallGraphM::MergeFrom(const CallGraphM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plearn.CallGraphM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  opnodes_.MergeFrom(from.opnodes_);
  flownodes_.MergeFrom(from.flownodes_);
  datanodes_.MergeFrom(from.datanodes_);
  innodes_.MergeFrom(from.innodes_);
  outnodes_.MergeFrom(from.outnodes_);
  internalnodes_.MergeFrom(from.internalnodes_);
}

void CallGraphM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plearn.CallGraphM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallGraphM::CopyFrom(const CallGraphM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plearn.CallGraphM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallGraphM::IsInitialized() const {
  return true;
}

void CallGraphM::InternalSwap(CallGraphM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  opnodes_.Swap(&other->opnodes_);
  flownodes_.Swap(&other->flownodes_);
  datanodes_.Swap(&other->datanodes_);
  innodes_.InternalSwap(&other->innodes_);
  outnodes_.InternalSwap(&other->outnodes_);
  internalnodes_.InternalSwap(&other->internalnodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallGraphM::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plearn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::plearn::OperationM* Arena::CreateMaybeMessage< ::plearn::OperationM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plearn::OperationM >(arena);
}
template<> PROTOBUF_NOINLINE ::plearn::ShapeM* Arena::CreateMaybeMessage< ::plearn::ShapeM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plearn::ShapeM >(arena);
}
template<> PROTOBUF_NOINLINE ::plearn::OpNodeM* Arena::CreateMaybeMessage< ::plearn::OpNodeM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plearn::OpNodeM >(arena);
}
template<> PROTOBUF_NOINLINE ::plearn::TensorNodeM* Arena::CreateMaybeMessage< ::plearn::TensorNodeM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plearn::TensorNodeM >(arena);
}
template<> PROTOBUF_NOINLINE ::plearn::CallGraphM_OpNodesEntry_DoNotUse* Arena::CreateMaybeMessage< ::plearn::CallGraphM_OpNodesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plearn::CallGraphM_OpNodesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::plearn::CallGraphM_FlowNodesEntry_DoNotUse* Arena::CreateMaybeMessage< ::plearn::CallGraphM_FlowNodesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plearn::CallGraphM_FlowNodesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::plearn::CallGraphM_DataNodesEntry_DoNotUse* Arena::CreateMaybeMessage< ::plearn::CallGraphM_DataNodesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plearn::CallGraphM_DataNodesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::plearn::CallGraphM* Arena::CreateMaybeMessage< ::plearn::CallGraphM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plearn::CallGraphM >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
