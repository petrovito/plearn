// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: call_graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_call_5fgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_call_5fgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_call_5fgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_call_5fgraph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_call_5fgraph_2eproto;
namespace plearn {
class CallGraphM;
class CallGraphMDefaultTypeInternal;
extern CallGraphMDefaultTypeInternal _CallGraphM_default_instance_;
class CallGraphM_DataNodesEntry_DoNotUse;
class CallGraphM_DataNodesEntry_DoNotUseDefaultTypeInternal;
extern CallGraphM_DataNodesEntry_DoNotUseDefaultTypeInternal _CallGraphM_DataNodesEntry_DoNotUse_default_instance_;
class CallGraphM_FlowNodesEntry_DoNotUse;
class CallGraphM_FlowNodesEntry_DoNotUseDefaultTypeInternal;
extern CallGraphM_FlowNodesEntry_DoNotUseDefaultTypeInternal _CallGraphM_FlowNodesEntry_DoNotUse_default_instance_;
class CallGraphM_OpNodesEntry_DoNotUse;
class CallGraphM_OpNodesEntry_DoNotUseDefaultTypeInternal;
extern CallGraphM_OpNodesEntry_DoNotUseDefaultTypeInternal _CallGraphM_OpNodesEntry_DoNotUse_default_instance_;
class OpNodeM;
class OpNodeMDefaultTypeInternal;
extern OpNodeMDefaultTypeInternal _OpNodeM_default_instance_;
class OperationM;
class OperationMDefaultTypeInternal;
extern OperationMDefaultTypeInternal _OperationM_default_instance_;
class ShapeM;
class ShapeMDefaultTypeInternal;
extern ShapeMDefaultTypeInternal _ShapeM_default_instance_;
class TensorNodeM;
class TensorNodeMDefaultTypeInternal;
extern TensorNodeMDefaultTypeInternal _TensorNodeM_default_instance_;
}  // namespace plearn
PROTOBUF_NAMESPACE_OPEN
template<> ::plearn::CallGraphM* Arena::CreateMaybeMessage<::plearn::CallGraphM>(Arena*);
template<> ::plearn::CallGraphM_DataNodesEntry_DoNotUse* Arena::CreateMaybeMessage<::plearn::CallGraphM_DataNodesEntry_DoNotUse>(Arena*);
template<> ::plearn::CallGraphM_FlowNodesEntry_DoNotUse* Arena::CreateMaybeMessage<::plearn::CallGraphM_FlowNodesEntry_DoNotUse>(Arena*);
template<> ::plearn::CallGraphM_OpNodesEntry_DoNotUse* Arena::CreateMaybeMessage<::plearn::CallGraphM_OpNodesEntry_DoNotUse>(Arena*);
template<> ::plearn::OpNodeM* Arena::CreateMaybeMessage<::plearn::OpNodeM>(Arena*);
template<> ::plearn::OperationM* Arena::CreateMaybeMessage<::plearn::OperationM>(Arena*);
template<> ::plearn::ShapeM* Arena::CreateMaybeMessage<::plearn::ShapeM>(Arena*);
template<> ::plearn::TensorNodeM* Arena::CreateMaybeMessage<::plearn::TensorNodeM>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace plearn {

enum OpTypeM : int {
  NOOP = 0,
  MATMUL = 1,
  OpTypeM_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OpTypeM_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OpTypeM_IsValid(int value);
constexpr OpTypeM OpTypeM_MIN = NOOP;
constexpr OpTypeM OpTypeM_MAX = MATMUL;
constexpr int OpTypeM_ARRAYSIZE = OpTypeM_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpTypeM_descriptor();
template<typename T>
inline const std::string& OpTypeM_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpTypeM>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpTypeM_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpTypeM_descriptor(), enum_t_value);
}
inline bool OpTypeM_Parse(
    const std::string& name, OpTypeM* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpTypeM>(
    OpTypeM_descriptor(), name, value);
}
// ===================================================================

class OperationM PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plearn.OperationM) */ {
 public:
  inline OperationM() : OperationM(nullptr) {};
  virtual ~OperationM();

  OperationM(const OperationM& from);
  OperationM(OperationM&& from) noexcept
    : OperationM() {
    *this = ::std::move(from);
  }

  inline OperationM& operator=(const OperationM& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationM& operator=(OperationM&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationM* internal_default_instance() {
    return reinterpret_cast<const OperationM*>(
               &_OperationM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OperationM& a, OperationM& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationM* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationM* New() const final {
    return CreateMaybeMessage<OperationM>(nullptr);
  }

  OperationM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationM& from);
  void MergeFrom(const OperationM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plearn.OperationM";
  }
  protected:
  explicit OperationM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_call_5fgraph_2eproto);
    return ::descriptor_table_call_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpTypeFieldNumber = 1,
  };
  // .plearn.OpTypeM opType = 1;
  void clear_optype();
  ::plearn::OpTypeM optype() const;
  void set_optype(::plearn::OpTypeM value);
  private:
  ::plearn::OpTypeM _internal_optype() const;
  void _internal_set_optype(::plearn::OpTypeM value);
  public:

  // @@protoc_insertion_point(class_scope:plearn.OperationM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int optype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_call_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class ShapeM PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plearn.ShapeM) */ {
 public:
  inline ShapeM() : ShapeM(nullptr) {};
  virtual ~ShapeM();

  ShapeM(const ShapeM& from);
  ShapeM(ShapeM&& from) noexcept
    : ShapeM() {
    *this = ::std::move(from);
  }

  inline ShapeM& operator=(const ShapeM& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeM& operator=(ShapeM&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShapeM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShapeM* internal_default_instance() {
    return reinterpret_cast<const ShapeM*>(
               &_ShapeM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShapeM& a, ShapeM& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeM* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeM* New() const final {
    return CreateMaybeMessage<ShapeM>(nullptr);
  }

  ShapeM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShapeM& from);
  void MergeFrom(const ShapeM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plearn.ShapeM";
  }
  protected:
  explicit ShapeM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_call_5fgraph_2eproto);
    return ::descriptor_table_call_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 2,
    kRankFieldNumber = 1,
  };
  // repeated int64 dims = 2;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dims();

  // int32 rank = 1;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:plearn.ShapeM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_call_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class OpNodeM PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plearn.OpNodeM) */ {
 public:
  inline OpNodeM() : OpNodeM(nullptr) {};
  virtual ~OpNodeM();

  OpNodeM(const OpNodeM& from);
  OpNodeM(OpNodeM&& from) noexcept
    : OpNodeM() {
    *this = ::std::move(from);
  }

  inline OpNodeM& operator=(const OpNodeM& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpNodeM& operator=(OpNodeM&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpNodeM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpNodeM* internal_default_instance() {
    return reinterpret_cast<const OpNodeM*>(
               &_OpNodeM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpNodeM& a, OpNodeM& b) {
    a.Swap(&b);
  }
  inline void Swap(OpNodeM* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpNodeM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpNodeM* New() const final {
    return CreateMaybeMessage<OpNodeM>(nullptr);
  }

  OpNodeM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpNodeM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpNodeM& from);
  void MergeFrom(const OpNodeM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpNodeM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plearn.OpNodeM";
  }
  protected:
  explicit OpNodeM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_call_5fgraph_2eproto);
    return ::descriptor_table_call_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 3,
    kOpFieldNumber = 2,
    kIdFieldNumber = 1,
    kOutputFieldNumber = 4,
  };
  // repeated int32 inputs = 3;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inputs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_inputs() const;
  void _internal_add_inputs(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_inputs();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 inputs(int index) const;
  void set_inputs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_inputs(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      inputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_inputs();

  // .plearn.OperationM op = 2;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const ::plearn::OperationM& op() const;
  ::plearn::OperationM* release_op();
  ::plearn::OperationM* mutable_op();
  void set_allocated_op(::plearn::OperationM* op);
  private:
  const ::plearn::OperationM& _internal_op() const;
  ::plearn::OperationM* _internal_mutable_op();
  public:
  void unsafe_arena_set_allocated_op(
      ::plearn::OperationM* op);
  ::plearn::OperationM* unsafe_arena_release_op();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 output = 4;
  void clear_output();
  ::PROTOBUF_NAMESPACE_ID::int32 output() const;
  void set_output(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output() const;
  void _internal_set_output(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:plearn.OpNodeM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > inputs_;
  mutable std::atomic<int> _inputs_cached_byte_size_;
  ::plearn::OperationM* op_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_call_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class TensorNodeM PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plearn.TensorNodeM) */ {
 public:
  inline TensorNodeM() : TensorNodeM(nullptr) {};
  virtual ~TensorNodeM();

  TensorNodeM(const TensorNodeM& from);
  TensorNodeM(TensorNodeM&& from) noexcept
    : TensorNodeM() {
    *this = ::std::move(from);
  }

  inline TensorNodeM& operator=(const TensorNodeM& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorNodeM& operator=(TensorNodeM&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorNodeM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorNodeM* internal_default_instance() {
    return reinterpret_cast<const TensorNodeM*>(
               &_TensorNodeM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TensorNodeM& a, TensorNodeM& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorNodeM* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorNodeM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorNodeM* New() const final {
    return CreateMaybeMessage<TensorNodeM>(nullptr);
  }

  TensorNodeM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorNodeM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorNodeM& from);
  void MergeFrom(const TensorNodeM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorNodeM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plearn.TensorNodeM";
  }
  protected:
  explicit TensorNodeM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_call_5fgraph_2eproto);
    return ::descriptor_table_call_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 3,
    kShapeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated int32 outputs = 3;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_outputs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_outputs() const;
  void _internal_add_outputs(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_outputs();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 outputs(int index) const;
  void set_outputs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_outputs(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      outputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_outputs();

  // .plearn.ShapeM shape = 2;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::plearn::ShapeM& shape() const;
  ::plearn::ShapeM* release_shape();
  ::plearn::ShapeM* mutable_shape();
  void set_allocated_shape(::plearn::ShapeM* shape);
  private:
  const ::plearn::ShapeM& _internal_shape() const;
  ::plearn::ShapeM* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::plearn::ShapeM* shape);
  ::plearn::ShapeM* unsafe_arena_release_shape();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:plearn.TensorNodeM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > outputs_;
  mutable std::atomic<int> _outputs_cached_byte_size_;
  ::plearn::ShapeM* shape_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_call_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class CallGraphM_OpNodesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CallGraphM_OpNodesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CallGraphM_OpNodesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CallGraphM_OpNodesEntry_DoNotUse();
  CallGraphM_OpNodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CallGraphM_OpNodesEntry_DoNotUse& other);
  static const CallGraphM_OpNodesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CallGraphM_OpNodesEntry_DoNotUse*>(&_CallGraphM_OpNodesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_call_5fgraph_2eproto);
    return ::descriptor_table_call_5fgraph_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class CallGraphM_FlowNodesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CallGraphM_FlowNodesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CallGraphM_FlowNodesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CallGraphM_FlowNodesEntry_DoNotUse();
  CallGraphM_FlowNodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CallGraphM_FlowNodesEntry_DoNotUse& other);
  static const CallGraphM_FlowNodesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CallGraphM_FlowNodesEntry_DoNotUse*>(&_CallGraphM_FlowNodesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_call_5fgraph_2eproto);
    return ::descriptor_table_call_5fgraph_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class CallGraphM_DataNodesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CallGraphM_DataNodesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CallGraphM_DataNodesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CallGraphM_DataNodesEntry_DoNotUse();
  CallGraphM_DataNodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CallGraphM_DataNodesEntry_DoNotUse& other);
  static const CallGraphM_DataNodesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CallGraphM_DataNodesEntry_DoNotUse*>(&_CallGraphM_DataNodesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_call_5fgraph_2eproto);
    return ::descriptor_table_call_5fgraph_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class CallGraphM PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plearn.CallGraphM) */ {
 public:
  inline CallGraphM() : CallGraphM(nullptr) {};
  virtual ~CallGraphM();

  CallGraphM(const CallGraphM& from);
  CallGraphM(CallGraphM&& from) noexcept
    : CallGraphM() {
    *this = ::std::move(from);
  }

  inline CallGraphM& operator=(const CallGraphM& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallGraphM& operator=(CallGraphM&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CallGraphM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallGraphM* internal_default_instance() {
    return reinterpret_cast<const CallGraphM*>(
               &_CallGraphM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CallGraphM& a, CallGraphM& b) {
    a.Swap(&b);
  }
  inline void Swap(CallGraphM* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallGraphM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallGraphM* New() const final {
    return CreateMaybeMessage<CallGraphM>(nullptr);
  }

  CallGraphM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallGraphM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CallGraphM& from);
  void MergeFrom(const CallGraphM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallGraphM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plearn.CallGraphM";
  }
  protected:
  explicit CallGraphM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_call_5fgraph_2eproto);
    return ::descriptor_table_call_5fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOpNodesFieldNumber = 1,
    kFlowNodesFieldNumber = 2,
    kDataNodesFieldNumber = 3,
    kInNodesFieldNumber = 4,
    kOutNodesFieldNumber = 5,
    kInternalNodesFieldNumber = 6,
  };
  // map<int32, .plearn.OpNodeM> opNodes = 1;
  int opnodes_size() const;
  private:
  int _internal_opnodes_size() const;
  public:
  void clear_opnodes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >&
      _internal_opnodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >*
      _internal_mutable_opnodes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >&
      opnodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >*
      mutable_opnodes();

  // map<int32, .plearn.TensorNodeM> flowNodes = 2;
  int flownodes_size() const;
  private:
  int _internal_flownodes_size() const;
  public:
  void clear_flownodes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >&
      _internal_flownodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >*
      _internal_mutable_flownodes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >&
      flownodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >*
      mutable_flownodes();

  // map<int32, .plearn.TensorNodeM> dataNodes = 3;
  int datanodes_size() const;
  private:
  int _internal_datanodes_size() const;
  public:
  void clear_datanodes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >&
      _internal_datanodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >*
      _internal_mutable_datanodes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >&
      datanodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >*
      mutable_datanodes();

  // repeated int32 inNodes = 4;
  int innodes_size() const;
  private:
  int _internal_innodes_size() const;
  public:
  void clear_innodes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_innodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_innodes() const;
  void _internal_add_innodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_innodes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 innodes(int index) const;
  void set_innodes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_innodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      innodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_innodes();

  // repeated int32 outNodes = 5;
  int outnodes_size() const;
  private:
  int _internal_outnodes_size() const;
  public:
  void clear_outnodes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_outnodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_outnodes() const;
  void _internal_add_outnodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_outnodes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 outnodes(int index) const;
  void set_outnodes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_outnodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      outnodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_outnodes();

  // repeated int32 internalNodes = 6;
  int internalnodes_size() const;
  private:
  int _internal_internalnodes_size() const;
  public:
  void clear_internalnodes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_internalnodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_internalnodes() const;
  void _internal_add_internalnodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_internalnodes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 internalnodes(int index) const;
  void set_internalnodes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_internalnodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      internalnodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_internalnodes();

  // @@protoc_insertion_point(class_scope:plearn.CallGraphM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CallGraphM_OpNodesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > opnodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CallGraphM_FlowNodesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > flownodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CallGraphM_DataNodesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > datanodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > innodes_;
  mutable std::atomic<int> _innodes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > outnodes_;
  mutable std::atomic<int> _outnodes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > internalnodes_;
  mutable std::atomic<int> _internalnodes_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_call_5fgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OperationM

// .plearn.OpTypeM opType = 1;
inline void OperationM::clear_optype() {
  optype_ = 0;
}
inline ::plearn::OpTypeM OperationM::_internal_optype() const {
  return static_cast< ::plearn::OpTypeM >(optype_);
}
inline ::plearn::OpTypeM OperationM::optype() const {
  // @@protoc_insertion_point(field_get:plearn.OperationM.opType)
  return _internal_optype();
}
inline void OperationM::_internal_set_optype(::plearn::OpTypeM value) {
  
  optype_ = value;
}
inline void OperationM::set_optype(::plearn::OpTypeM value) {
  _internal_set_optype(value);
  // @@protoc_insertion_point(field_set:plearn.OperationM.opType)
}

// -------------------------------------------------------------------

// ShapeM

// int32 rank = 1;
inline void ShapeM::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShapeM::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShapeM::rank() const {
  // @@protoc_insertion_point(field_get:plearn.ShapeM.rank)
  return _internal_rank();
}
inline void ShapeM::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void ShapeM::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:plearn.ShapeM.rank)
}

// repeated int64 dims = 2;
inline int ShapeM::_internal_dims_size() const {
  return dims_.size();
}
inline int ShapeM::dims_size() const {
  return _internal_dims_size();
}
inline void ShapeM::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShapeM::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShapeM::dims(int index) const {
  // @@protoc_insertion_point(field_get:plearn.ShapeM.dims)
  return _internal_dims(index);
}
inline void ShapeM::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:plearn.ShapeM.dims)
}
inline void ShapeM::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dims_.Add(value);
}
inline void ShapeM::add_dims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:plearn.ShapeM.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ShapeM::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ShapeM::dims() const {
  // @@protoc_insertion_point(field_list:plearn.ShapeM.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ShapeM::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ShapeM::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:plearn.ShapeM.dims)
  return _internal_mutable_dims();
}

// -------------------------------------------------------------------

// OpNodeM

// int32 id = 1;
inline void OpNodeM::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpNodeM::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpNodeM::id() const {
  // @@protoc_insertion_point(field_get:plearn.OpNodeM.id)
  return _internal_id();
}
inline void OpNodeM::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void OpNodeM::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:plearn.OpNodeM.id)
}

// .plearn.OperationM op = 2;
inline bool OpNodeM::_internal_has_op() const {
  return this != internal_default_instance() && op_ != nullptr;
}
inline bool OpNodeM::has_op() const {
  return _internal_has_op();
}
inline void OpNodeM::clear_op() {
  if (GetArena() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
}
inline const ::plearn::OperationM& OpNodeM::_internal_op() const {
  const ::plearn::OperationM* p = op_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plearn::OperationM*>(
      &::plearn::_OperationM_default_instance_);
}
inline const ::plearn::OperationM& OpNodeM::op() const {
  // @@protoc_insertion_point(field_get:plearn.OpNodeM.op)
  return _internal_op();
}
inline void OpNodeM::unsafe_arena_set_allocated_op(
    ::plearn::OperationM* op) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_);
  }
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plearn.OpNodeM.op)
}
inline ::plearn::OperationM* OpNodeM::release_op() {
  auto temp = unsafe_arena_release_op();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::plearn::OperationM* OpNodeM::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_release:plearn.OpNodeM.op)
  
  ::plearn::OperationM* temp = op_;
  op_ = nullptr;
  return temp;
}
inline ::plearn::OperationM* OpNodeM::_internal_mutable_op() {
  
  if (op_ == nullptr) {
    auto* p = CreateMaybeMessage<::plearn::OperationM>(GetArena());
    op_ = p;
  }
  return op_;
}
inline ::plearn::OperationM* OpNodeM::mutable_op() {
  // @@protoc_insertion_point(field_mutable:plearn.OpNodeM.op)
  return _internal_mutable_op();
}
inline void OpNodeM::set_allocated_op(::plearn::OperationM* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete op_;
  }
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op);
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    
  } else {
    
  }
  op_ = op;
  // @@protoc_insertion_point(field_set_allocated:plearn.OpNodeM.op)
}

// repeated int32 inputs = 3;
inline int OpNodeM::_internal_inputs_size() const {
  return inputs_.size();
}
inline int OpNodeM::inputs_size() const {
  return _internal_inputs_size();
}
inline void OpNodeM::clear_inputs() {
  inputs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpNodeM::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpNodeM::inputs(int index) const {
  // @@protoc_insertion_point(field_get:plearn.OpNodeM.inputs)
  return _internal_inputs(index);
}
inline void OpNodeM::set_inputs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  inputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:plearn.OpNodeM.inputs)
}
inline void OpNodeM::_internal_add_inputs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  inputs_.Add(value);
}
inline void OpNodeM::add_inputs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_inputs(value);
  // @@protoc_insertion_point(field_add:plearn.OpNodeM.inputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OpNodeM::_internal_inputs() const {
  return inputs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OpNodeM::inputs() const {
  // @@protoc_insertion_point(field_list:plearn.OpNodeM.inputs)
  return _internal_inputs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OpNodeM::_internal_mutable_inputs() {
  return &inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OpNodeM::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:plearn.OpNodeM.inputs)
  return _internal_mutable_inputs();
}

// int32 output = 4;
inline void OpNodeM::clear_output() {
  output_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpNodeM::_internal_output() const {
  return output_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpNodeM::output() const {
  // @@protoc_insertion_point(field_get:plearn.OpNodeM.output)
  return _internal_output();
}
inline void OpNodeM::_internal_set_output(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  output_ = value;
}
inline void OpNodeM::set_output(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output(value);
  // @@protoc_insertion_point(field_set:plearn.OpNodeM.output)
}

// -------------------------------------------------------------------

// TensorNodeM

// int32 id = 1;
inline void TensorNodeM::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorNodeM::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorNodeM::id() const {
  // @@protoc_insertion_point(field_get:plearn.TensorNodeM.id)
  return _internal_id();
}
inline void TensorNodeM::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void TensorNodeM::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:plearn.TensorNodeM.id)
}

// .plearn.ShapeM shape = 2;
inline bool TensorNodeM::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool TensorNodeM::has_shape() const {
  return _internal_has_shape();
}
inline void TensorNodeM::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::plearn::ShapeM& TensorNodeM::_internal_shape() const {
  const ::plearn::ShapeM* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plearn::ShapeM*>(
      &::plearn::_ShapeM_default_instance_);
}
inline const ::plearn::ShapeM& TensorNodeM::shape() const {
  // @@protoc_insertion_point(field_get:plearn.TensorNodeM.shape)
  return _internal_shape();
}
inline void TensorNodeM::unsafe_arena_set_allocated_shape(
    ::plearn::ShapeM* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plearn.TensorNodeM.shape)
}
inline ::plearn::ShapeM* TensorNodeM::release_shape() {
  auto temp = unsafe_arena_release_shape();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::plearn::ShapeM* TensorNodeM::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:plearn.TensorNodeM.shape)
  
  ::plearn::ShapeM* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::plearn::ShapeM* TensorNodeM::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::plearn::ShapeM>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::plearn::ShapeM* TensorNodeM::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:plearn.TensorNodeM.shape)
  return _internal_mutable_shape();
}
inline void TensorNodeM::set_allocated_shape(::plearn::ShapeM* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:plearn.TensorNodeM.shape)
}

// repeated int32 outputs = 3;
inline int TensorNodeM::_internal_outputs_size() const {
  return outputs_.size();
}
inline int TensorNodeM::outputs_size() const {
  return _internal_outputs_size();
}
inline void TensorNodeM::clear_outputs() {
  outputs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorNodeM::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorNodeM::outputs(int index) const {
  // @@protoc_insertion_point(field_get:plearn.TensorNodeM.outputs)
  return _internal_outputs(index);
}
inline void TensorNodeM::set_outputs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  outputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:plearn.TensorNodeM.outputs)
}
inline void TensorNodeM::_internal_add_outputs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  outputs_.Add(value);
}
inline void TensorNodeM::add_outputs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_outputs(value);
  // @@protoc_insertion_point(field_add:plearn.TensorNodeM.outputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorNodeM::_internal_outputs() const {
  return outputs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorNodeM::outputs() const {
  // @@protoc_insertion_point(field_list:plearn.TensorNodeM.outputs)
  return _internal_outputs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorNodeM::_internal_mutable_outputs() {
  return &outputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorNodeM::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:plearn.TensorNodeM.outputs)
  return _internal_mutable_outputs();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CallGraphM

// map<int32, .plearn.OpNodeM> opNodes = 1;
inline int CallGraphM::_internal_opnodes_size() const {
  return opnodes_.size();
}
inline int CallGraphM::opnodes_size() const {
  return _internal_opnodes_size();
}
inline void CallGraphM::clear_opnodes() {
  opnodes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >&
CallGraphM::_internal_opnodes() const {
  return opnodes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >&
CallGraphM::opnodes() const {
  // @@protoc_insertion_point(field_map:plearn.CallGraphM.opNodes)
  return _internal_opnodes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >*
CallGraphM::_internal_mutable_opnodes() {
  return opnodes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::OpNodeM >*
CallGraphM::mutable_opnodes() {
  // @@protoc_insertion_point(field_mutable_map:plearn.CallGraphM.opNodes)
  return _internal_mutable_opnodes();
}

// map<int32, .plearn.TensorNodeM> flowNodes = 2;
inline int CallGraphM::_internal_flownodes_size() const {
  return flownodes_.size();
}
inline int CallGraphM::flownodes_size() const {
  return _internal_flownodes_size();
}
inline void CallGraphM::clear_flownodes() {
  flownodes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >&
CallGraphM::_internal_flownodes() const {
  return flownodes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >&
CallGraphM::flownodes() const {
  // @@protoc_insertion_point(field_map:plearn.CallGraphM.flowNodes)
  return _internal_flownodes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >*
CallGraphM::_internal_mutable_flownodes() {
  return flownodes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >*
CallGraphM::mutable_flownodes() {
  // @@protoc_insertion_point(field_mutable_map:plearn.CallGraphM.flowNodes)
  return _internal_mutable_flownodes();
}

// map<int32, .plearn.TensorNodeM> dataNodes = 3;
inline int CallGraphM::_internal_datanodes_size() const {
  return datanodes_.size();
}
inline int CallGraphM::datanodes_size() const {
  return _internal_datanodes_size();
}
inline void CallGraphM::clear_datanodes() {
  datanodes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >&
CallGraphM::_internal_datanodes() const {
  return datanodes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >&
CallGraphM::datanodes() const {
  // @@protoc_insertion_point(field_map:plearn.CallGraphM.dataNodes)
  return _internal_datanodes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >*
CallGraphM::_internal_mutable_datanodes() {
  return datanodes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::plearn::TensorNodeM >*
CallGraphM::mutable_datanodes() {
  // @@protoc_insertion_point(field_mutable_map:plearn.CallGraphM.dataNodes)
  return _internal_mutable_datanodes();
}

// repeated int32 inNodes = 4;
inline int CallGraphM::_internal_innodes_size() const {
  return innodes_.size();
}
inline int CallGraphM::innodes_size() const {
  return _internal_innodes_size();
}
inline void CallGraphM::clear_innodes() {
  innodes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CallGraphM::_internal_innodes(int index) const {
  return innodes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CallGraphM::innodes(int index) const {
  // @@protoc_insertion_point(field_get:plearn.CallGraphM.inNodes)
  return _internal_innodes(index);
}
inline void CallGraphM::set_innodes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  innodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:plearn.CallGraphM.inNodes)
}
inline void CallGraphM::_internal_add_innodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  innodes_.Add(value);
}
inline void CallGraphM::add_innodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_innodes(value);
  // @@protoc_insertion_point(field_add:plearn.CallGraphM.inNodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CallGraphM::_internal_innodes() const {
  return innodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CallGraphM::innodes() const {
  // @@protoc_insertion_point(field_list:plearn.CallGraphM.inNodes)
  return _internal_innodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CallGraphM::_internal_mutable_innodes() {
  return &innodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CallGraphM::mutable_innodes() {
  // @@protoc_insertion_point(field_mutable_list:plearn.CallGraphM.inNodes)
  return _internal_mutable_innodes();
}

// repeated int32 outNodes = 5;
inline int CallGraphM::_internal_outnodes_size() const {
  return outnodes_.size();
}
inline int CallGraphM::outnodes_size() const {
  return _internal_outnodes_size();
}
inline void CallGraphM::clear_outnodes() {
  outnodes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CallGraphM::_internal_outnodes(int index) const {
  return outnodes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CallGraphM::outnodes(int index) const {
  // @@protoc_insertion_point(field_get:plearn.CallGraphM.outNodes)
  return _internal_outnodes(index);
}
inline void CallGraphM::set_outnodes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  outnodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:plearn.CallGraphM.outNodes)
}
inline void CallGraphM::_internal_add_outnodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  outnodes_.Add(value);
}
inline void CallGraphM::add_outnodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_outnodes(value);
  // @@protoc_insertion_point(field_add:plearn.CallGraphM.outNodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CallGraphM::_internal_outnodes() const {
  return outnodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CallGraphM::outnodes() const {
  // @@protoc_insertion_point(field_list:plearn.CallGraphM.outNodes)
  return _internal_outnodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CallGraphM::_internal_mutable_outnodes() {
  return &outnodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CallGraphM::mutable_outnodes() {
  // @@protoc_insertion_point(field_mutable_list:plearn.CallGraphM.outNodes)
  return _internal_mutable_outnodes();
}

// repeated int32 internalNodes = 6;
inline int CallGraphM::_internal_internalnodes_size() const {
  return internalnodes_.size();
}
inline int CallGraphM::internalnodes_size() const {
  return _internal_internalnodes_size();
}
inline void CallGraphM::clear_internalnodes() {
  internalnodes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CallGraphM::_internal_internalnodes(int index) const {
  return internalnodes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CallGraphM::internalnodes(int index) const {
  // @@protoc_insertion_point(field_get:plearn.CallGraphM.internalNodes)
  return _internal_internalnodes(index);
}
inline void CallGraphM::set_internalnodes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  internalnodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:plearn.CallGraphM.internalNodes)
}
inline void CallGraphM::_internal_add_internalnodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  internalnodes_.Add(value);
}
inline void CallGraphM::add_internalnodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_internalnodes(value);
  // @@protoc_insertion_point(field_add:plearn.CallGraphM.internalNodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CallGraphM::_internal_internalnodes() const {
  return internalnodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CallGraphM::internalnodes() const {
  // @@protoc_insertion_point(field_list:plearn.CallGraphM.internalNodes)
  return _internal_internalnodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CallGraphM::_internal_mutable_internalnodes() {
  return &internalnodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CallGraphM::mutable_internalnodes() {
  // @@protoc_insertion_point(field_mutable_list:plearn.CallGraphM.internalNodes)
  return _internal_mutable_internalnodes();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plearn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::plearn::OpTypeM> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::plearn::OpTypeM>() {
  return ::plearn::OpTypeM_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_call_5fgraph_2eproto
